CAPI=2:

name : cr1901:migen:uart:0

generators:
  migen_uart_gen:
    interpreter: python3
    command : uart_gen.py
    description: Migen UART generator
    usage: |
      Generate a simple UART with compile-time configurable baud rate
      for a predefined target clock frequency. The UART core can be used
      in 3 configurations:

      1. As part of a larger design, when loopback=false.
      2. Standalone loopback design where migen only handles Verilog gen, when
         loopback=true and the migen platform isn't specified.
      3. Standalone loopback design where migen supplies PCF as well,
         when loopback=true and migen platform is specified.

      In configuration 1, the generated core ports are:

      tx, rx, out_data[7:0], in_data[7:0] wr, rd, tx_empty, rx_empty, tx_ov,
      rx_ov, clk, rst

      In configuration 2, the generated core ports are (rst handled
      internally):

      tx, rx, tx_led, rx_led, load_led, take_led, empty_led, clk

      Configuration 3 will automatically generate ports based on the available
      "serial" and "user_led" resources.

      parameters:
        clk_freq (int) : Frequency (Hz) of the clock (default 12000000)
        baud_rate (int) : Requested baud rate (default 19200)
        loopback (bool) : Generate a loopback test wrapper to be included in other
                          projects (or standalone if using loc_attrs)
        migen (dict) : Options for Migen code generation, dict entries
                       described below
          platform (str) : If using loopback, create a synthesizable design
                           targeting a specific Migen platform
          extensions (dict): YAML description of I/O to be added to the
                             current platform via plat.add_extension (see
                             below section)

      extension dict examples:
        extensions:
          serial:
            - subsignals:
                - [rx, "PMOD:6"]
                - [tx, "PMOD:5"]
                - [rts, "PMOD:4"]
                - [cts, "PMOD:7"]
              io_standard:
                LVCMOS33

      will generate:
        [('serial', 0,
          Subsignal('cts', Pins('PMOD:7')),
          Subsignal('rts', Pins('PMOD:4')),
          Subsignal('rx', Pins('PMOD:6')),
          Subsignal('tx', Pins('PMOD:5')),
          IOStandard('LVCMOS33'))]

        extensions:
          user_led:
            - { pins: "PMOD2:4", io_standard: LVCMOS33 }
            - { pins: "PMOD2:0", io_standard: LVCMOS33 }
            - { pins: "PMOD2:1", io_standard: LVCMOS33 }
            - { pins: "PMOD2:5", io_standard: LVCMOS33 }
            - { pins: "PMOD2:2", io_standard: LVCMOS33 }

      will generate:
        [('user_led', 0, Pins('PMOD2:4'), IOStandard('LVCMOS33')),
         ('user_led', 1, Pins('PMOD2:0'), IOStandard('LVCMOS33')),
         ('user_led', 2, Pins('PMOD2:1'), IOStandard('LVCMOS33')),
         ('user_led', 3, Pins('PMOD2:5'), IOStandard('LVCMOS33')),
         ('user_led', 4, Pins('PMOD2:2'), IOStandard('LVCMOS33'))]
